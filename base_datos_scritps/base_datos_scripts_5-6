
CREATE TABLE countries (
    id_country SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

CREATE TABLE roles (
    id_role SERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE
);


CREATE TABLE taxes (
    id_tax SERIAL PRIMARY KEY,
    percentage INTEGER NOT NULL
);


CREATE TABLE discounts (
    id_discount SERIAL PRIMARY KEY,
    status varchar(50) DEFAULT 'active',
    percentage DECIMAL(5, 2) NOT NULL
);


CREATE TABLE offers (
    id_offer SERIAL PRIMARY KEY,
    status varchar(50) DEFAULT 'active'
);


CREATE TABLE payments (
    id_payment SERIAL PRIMARY KEY,
    type VARCHAR(50) NOT NULL UNIQUE
);


CREATE TABLE invoice_status (
    id_invoice_status SERIAL PRIMARY KEY,
    status VARCHAR(50) NOT NULL UNIQUE
);

--------------------------------------------------

CREATE TABLE customers (
    email VARCHAR(255) PRIMARY KEY,
    id_country INTEGER NOT NULL,
    id_role INTEGER NOT NULL,
    name VARCHAR(100) NOT NULL,
    age INTEGER,
    password VARCHAR(255) NOT NULL,
    physical_address TEXT,
    FOREIGN KEY (id_country) REFERENCES countries(id_country),
    FOREIGN KEY (id_role) REFERENCES roles(id_role)
);


CREATE TABLE products (
    id_product SERIAL PRIMARY KEY,
    id_discount INTEGER,
    id_offer INTEGER,
    id_tax INTEGER NOT NULL,
    name VARCHAR(255) NOT NULL,
    details TEXT,
    minimum_stock INTEGER NOT NULL DEFAULT 0,
    current_stock INTEGER NOT NULL DEFAULT 0,
    price DECIMAL(10, 2) NOT NULL,
    price_with_tax DECIMAL(10, 2),
    FOREIGN KEY (id_discount) REFERENCES discounts(id_discount),
    FOREIGN KEY (id_offer) REFERENCES offers(id_offer),
    FOREIGN KEY (id_tax) REFERENCES taxes(id_tax)
);


CREATE TABLE invoices (
    id_invoice SERIAL PRIMARY KEY,
    customer_email VARCHAR(255) NOT NULL,
    id_payment INTEGER NOT NULL,
    id_invoice_status INTEGER NOT NULL,
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total_to_pay DECIMAL(12, 2) NOT NULL,
    FOREIGN KEY (customer_email) REFERENCES customers(email),
    FOREIGN KEY (id_payment) REFERENCES payments(id_payment),
    FOREIGN KEY (id_invoice_status) REFERENCES invoice_status(id_invoice_status)
);


CREATE TABLE orders (
    id_order SERIAL PRIMARY KEY,
    id_invoice INTEGER NOT NULL,
    id_product INTEGER NOT NULL,
    detail TEXT,
    amount INTEGER NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (id_invoice) REFERENCES invoices(id_invoice),
    FOREIGN KEY (id_product) REFERENCES products(id_product)
);

-----------------------------------------------------------------------------

CREATE TABLE products_customers (
    id_product INTEGER NOT NULL,
    customer_email VARCHAR(255) NOT NULL,
    PRIMARY KEY (id_product, customer_email),
    FOREIGN KEY (id_product) REFERENCES products(id_product),
    FOREIGN KEY (customer_email) REFERENCES customers(email)
);


--------------------------------------------------------------------------------

-  Script SQL para Operaciones CRUD - Hack - 6 

INSERT INTO countries (name) VALUES
('Venezuela'),
('Colombia'),
('México');

select * from countries;

INSERT INTO roles (name) VALUES
('Administrador'),
('Cliente Premium'),
('Cliente Básico');
select * from roles;


INSERT INTO taxes (percentage) VALUES
(10),
(15),
(20);
select * from taxes;


INSERT INTO discounts (status, percentage) VALUES
('active', 5.00),
('active', 10.00),
('inactive', 25.00);
select * from discounts;


INSERT INTO offers (status) VALUES
('active'),
('active'),
('inactive');
select * from offers;


INSERT INTO payments (type) VALUES
('Tarjeta de Crédito'),
('Transferencia Bancaria'),
('PayPal'),
('Efectivo'),
('Criptomonedas'),
('Débito Directo'),
('Pago Móvil');
select * from payments;


INSERT INTO invoice_status (status) VALUES
('Pendiente de Pago'),
('Pagada'),
('Cancelada');
select * from invoice_status;


--------------------------------------------------------------


INSERT INTO customers (email, id_country, id_role, name, age, password, physical_address) VALUES
('pedro.diaz@email.com', 1, 1, 'Pedro Diaz', 35, 'hash123', 'Av. Libertador 101, Caracas'), 
('jose.garcia@email.com', 2, 2, 'Jose Garcia', 28, 'hash456', 'Carrera 7 #1-10, Bogotá'),
('manuel.rodriguez@email.com', 3, 3, 'Manuel  Rodriguez', 45, 'hash789', 'Calle 50 #20-5, Ciudad de México');
select * from customers;


INSERT INTO products (id_discount, id_offer, id_tax, name, details, minimum_stock, current_stock, price, price_with_tax) VALUES
(1, 1, 1, 'Laptop Gaming Pro', 'Potente laptop para juegos y diseño.', 5, 20, 1500.00, 1650.00), 
(2, 2, 2, 'Monitor Ultrawide 4K', 'Monitor de alta resolución para trabajo.', 10, 50, 450.00, 517.50),  
(NULL, NULL, 3, 'Teclado Mecánico', 'Teclado RGB con switches táctiles.', 20, 100, 99.99, 119.99); 
select * from products;

---------------------------------------------------------------------------


INSERT INTO products_customers (id_product, customer_email) VALUES
(1, 'pedro.diaz@email.com');
select * from products_customers;


INSERT INTO products_customers (id_product, customer_email) VALUES
(2, 'manuel.rodriguez@email.com');
select * from products_customers;


INSERT INTO products_customers (id_product, customer_email) VALUES
(3, 'jose.garcia@email.com');
select * from products_customers;

----------------------------------------------------------------------------------


INSERT INTO invoices (customer_email, id_payment, id_invoice_status, total_to_pay) VALUES
('pedro.diaz@email.com', 1, 2, 1650.00); 
select * from invoices;


INSERT INTO orders (id_invoice, id_product, detail, amount, price) VALUES
(1, 1, 'Laptop con 5% de descuento aplicado.', 1, 1650.00);
select * from orders;


INSERT INTO invoices (customer_email, id_payment, id_invoice_status, total_to_pay) VALUES
('jose.garcia@email.com', 2, 1, 1035.00);
select * from invoices;


INSERT INTO orders (id_invoice, id_product, detail, amount, price) VALUES
(2, 2, 'Monitor con 10% de descuento aplicado.', 2, 517.50);
select * from orders;

INSERT INTO invoices (customer_email, id_payment, id_invoice_status, total_to_pay) VALUES
('manuel.rodriguez@email.com', 3, 2, 239.98); 
select * from invoices;


INSERT INTO orders (id_invoice, id_product, detail, amount, price) VALUES
(3, 3, 'Teclado Mecánico sin descuentos.', 2, 119.99);
select * from orders;

SELECT '*** INSERTS COMPLETADOS ***' AS status;


- Eliminación de Registros (DELETE)

DELETE FROM orders WHERE id_invoice = 1;
select * from orders;


DELETE FROM invoices WHERE customer_email = 'pedro.diaz@email.com';
SELECT * FROM invoices;


DELETE FROM products_customers WHERE customer_email = 'pedro.diaz@email.com';
SELECT * FROM products_customers;


DELETE FROM customers WHERE email = 'pedro.diaz@email.com';
SELECT * FROM customers;

SELECT '*** DELETE DEL PRIMER CLIENTE COMPLETADO ***' AS status;

- Actualización de Registros (UPDATE)

select * from customers;
UPDATE customers
SET
    id_role = (SELECT id_role FROM roles WHERE name = 'Cliente Premium'),
    physical_address = 'Nueva Dirección: Calle Falsa 123, Ciudad de México',
    age = 46
WHERE
    email = 'manuel.rodriguez@email.com';
SELECT * FROM customers;


SELECT * FROM taxes;
UPDATE taxes
SET
    percentage = percentage + 2;
SELECT * FROM taxes;


SELECT * FROM products;
UPDATE products AS p
SET
    price = p.price * 1.10, 
    price_with_tax = ROUND(p.price * 1.10 * (1 + (t.percentage / 100.0)), 2)
FROM taxes AS t
WHERE p.id_tax = t.id_tax;
SELECT * FROM products;

SELECT '*** UPDATES COMPLETADOS ***' AS status;

- Leer de Registros (READ)

SELECT *
FROM customers c
JOIN roles r ON c.id_role = r.id_role;

SELECT * FROM taxes;

SELECT p.name, p.price AS new_price, t.percentage AS tax_percentage, p.price_with_tax AS new_price_with_tax
FROM products p
JOIN taxes t ON p.id_tax = t.id_tax;

SELECT '*** TODAS LAS OPERACIONES CRUD COMPLETADAS CON ÉXITO ***' AS status;